diff --git a/node_modules/mysql2/lib/parsers/binary_parser.js b/node_modules/mysql2/lib/parsers/binary_parser.js
index ce3c908..f45895d 100644
--- a/node_modules/mysql2/lib/parsers/binary_parser.js
+++ b/node_modules/mysql2/lib/parsers/binary_parser.js
@@ -101,9 +101,9 @@ function compile(fields, options, config) {
           // Since for JSON columns mysql always returns charset 63 (BINARY),
           // we have to handle it according to JSON specs and use "utf8",
           // see https://github.com/sidorares/node-mysql2/issues/1661
-          console.warn(
-            `typeCast: JSON column "${field.name}" is interpreted as BINARY by default, recommended to manually set utf8 encoding: \`field.string("utf8")\``
-          );
+          //console.warn(
+          //  `typeCast: JSON column "${field.name}" is interpreted as BINARY by default, recommended to manually set utf8 encoding: \`field.string("utf8")\``
+          //);
         }
 
         if (
diff --git a/node_modules/mysql2/lib/parsers/static_binary_parser.js b/node_modules/mysql2/lib/parsers/static_binary_parser.js
index b83cb86..ce7405a 100644
--- a/node_modules/mysql2/lib/parsers/static_binary_parser.js
+++ b/node_modules/mysql2/lib/parsers/static_binary_parser.js
@@ -132,9 +132,9 @@ function getBinaryParser(fields, _options, config) {
                         // Since for JSON columns mysql always returns charset 63 (BINARY),
                         // we have to handle it according to JSON specs and use "utf8",
                         // see https://github.com/sidorares/node-mysql2/issues/1661
-                        console.warn(
-                          `typeCast: JSON column "${field.name}" is interpreted as BINARY by default, recommended to manually set utf8 encoding: \`field.string("utf8")\``
-                        );
+                        //console.warn(
+                        //  `typeCast: JSON column "${field.name}" is interpreted as BINARY by default, recommended to manually set utf8 encoding: \`field.string("utf8")\``
+                        //);
                       }
 
                       if (
diff --git a/node_modules/mysql2/lib/parsers/static_text_parser.js b/node_modules/mysql2/lib/parsers/static_text_parser.js
index 69cc2a4..f509682 100644
--- a/node_modules/mysql2/lib/parsers/static_text_parser.js
+++ b/node_modules/mysql2/lib/parsers/static_text_parser.js
@@ -85,9 +85,9 @@ function createTypecastField(field, packet) {
         // Since for JSON columns mysql always returns charset 63 (BINARY),
         // we have to handle it according to JSON specs and use "utf8",
         // see https://github.com/sidorares/node-mysql2/issues/1661
-        console.warn(
-          `typeCast: JSON column "${field.name}" is interpreted as BINARY by default, recommended to manually set utf8 encoding: \`field.string("utf8")\``
-        );
+        //console.warn(
+        //  `typeCast: JSON column "${field.name}" is interpreted as BINARY by default, recommended to manually set utf8 encoding: \`field.string("utf8")\``
+        //);
       }
       return packet.readLengthCodedString(encoding);
     },
diff --git a/node_modules/mysql2/lib/parsers/text_parser.js b/node_modules/mysql2/lib/parsers/text_parser.js
index 69b7e21..db3efc6 100644
--- a/node_modules/mysql2/lib/parsers/text_parser.js
+++ b/node_modules/mysql2/lib/parsers/text_parser.js
@@ -97,9 +97,9 @@ function compile(fields, options, config) {
           // Since for JSON columns mysql always returns charset 63 (BINARY),
           // we have to handle it according to JSON specs and use "utf8",
           // see https://github.com/sidorares/node-mysql2/issues/1661
-          console.warn(
-            `typeCast: JSON column "${field.name}" is interpreted as BINARY by default, recommended to manually set utf8 encoding: \`field.string("utf8")\``
-          );
+          //console.warn(
+          //  `typeCast: JSON column "${field.name}" is interpreted as BINARY by default, recommended to manually set utf8 encoding: \`field.string("utf8")\``
+          //);
         }
 
         return _this.packet.readLengthCodedString(encoding);
